version: 2.1

jobs:
  check_syntax:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run: 
          name: "create venv"
          command: |
            python3 -m venv ~/.devops
      - run:
          name: "Install dependencies"
          command: |
            make install
      - run:
          name: "Check syntaxt code"
          command: |
            make lint

  build_image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: echo dir
          command: |
            ls -la
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build docker iamge
          command: |
            docker build -t app .
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: push image to docker hub
          command: |
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker tag app "daoducnha29493/udacity-devops-final:${CIRCLE_WORKFLOW_ID:0:7}"
            docker push "daoducnha29493/udacity-devops-final:${CIRCLE_WORKFLOW_ID:0:7}"
 
  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Create eks cluster"
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file eks-cluster.yml \
              --tags project=udacity-final-project \
              --stack-name "udacity-final-project-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://eks-cluster-parameters.json             
      - run:
          name: Create group node for eks
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file eks-group-node.yml \
              --tags project=udacity-final-project \
              --stack-name "udacity-final-project-groupnode-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://eks-group-node-parameters.json

  deploy-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
      - run:
          name: Config kubectl connect to aws
          command: |
            aws eks update-kubeconfig --region us-east-1  --name udacity-devops-project-final
      - run:
          name: Create deployment
          command: |
            kubectl create deploy udacity-${CIRCLE_WORKFLOW_ID:0:7} --image=daoducnha29493/udacity-devops-final:${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Expose deployment
          command: |
            kubectl expose deployment udacity-${CIRCLE_WORKFLOW_ID:0:7} --type=LoadBalancer --name=publicapp-${CIRCLE_WORKFLOW_ID:0:7} --port=80
      - run:
          name: store app endpoint and old
          command: |
            kubectl get services publicapp-${CIRCLE_WORKFLOW_ID:0:7} --output jsonpath='{.status.loadBalancer.ingress[0].hostname}' > ~/app-endpoint.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - ~/app-endpoint.txt

  smoke-test:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: show app endpoint
          command: |
            cat ~/app-endpoint.txt
      - run:
          name: Smoke test.
          command: |
            cat ~/app-endpoint.txt
            export APP_IP=$(cat ~/app-endpoint.txt)
            echo "${APP_IP}"
            if curl "${APP_IP}/hello" | grep "Hello"
            then
              return 0
            else
              return 1
            fi

workflows:
  default:
    jobs:
      - check_syntax
      - build_image:
          requires: [check_syntax]
      - deploy_infrastructure:
          requires: [check_syntax]
      - deploy-app:
          requires: [deploy_infrastructure]
      # - smoke-test:
      #     requires: [deploy-app]

