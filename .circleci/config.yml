version: 2.1

jobs:
  check_syntax:
    docker:
      - image: python:3.7.3-stretch
    steps:
      - checkout
      - run: 
          name: "create venv"
          command: |
            python3 -m venv ~/.devops
      - run:
          name: "Install dependencies"
          command: |
            make install
      - run:
          name: "Check syntaxt code"
          command: |
            make lint

  build_image:
    docker:
      - image: docker:17.05.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: echo dir
          command: |
            ls -la
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build docker iamge
          command: |
            docker build -t app .
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - run:
          name: push image to docker hub
          command: |
            docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
            docker tag app "daoducnha29493/udacity-devops-final:${CIRCLE_WORKFLOW_ID:0:7}"
            docker push "daoducnha29493/udacity-devops-final:${CIRCLE_WORKFLOW_ID:0:7}"
 
  deploy_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: "Create eks cluster"
          no_output_timeout: 30m
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file eks-cluster.yml \
              --tags project=udacity-final-project \
              --stack-name "udacity-final-project-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://eks-cluster-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM"             
      - run:
          name: Create group node for eks
          no_output_timeout: 30m
          command: |
            cd .circleci/files
            aws cloudformation deploy \
              --template-file eks-group-node.yml \
              --tags project=udacity-final-project \
              --stack-name "udacity-final-project-groupnode-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides file://eks-group-node-parameters.json \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" 

  deploy-app:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Config kubectl connect to aws
          command: |
            aws eks update-kubeconfig --region us-east-1  --name udacity-devops-project-final
      - run:
          name: Create deployment
          command: |
            kubectl create deploy udacity-f0d1e716 --image=daoducnha29493/udacity-devops-final:e564f5c
      - run:
          name: Expose deployment
          command: |
            kubectl expose deployment udacity-f0d1e716 --type=LoadBalancer --name=publicapp-f0d1e716 --port=80
            sleep 1m
      - run:
          name: store app endpoint and old
          command: |
            cd .circleci/files
            kubectl get services
            api=$(kubectl get services publicapp-f0d1e716 --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo $api >> app-endpoint.txt
            cat app-endpoint.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/files/app-endpoint.txt

  smoke-test:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm 
            pip install awscli
      - run:
          name: show app endpoint
          command: |
            cd .circleci/files
            cat app-endpoint.txt
      - run:
          name: Smoke test.
          command: |
            cd .circleci/files
          
            export APP_IP=$(cat app-endpoint.txt)
            
            export APP_ENDPOINT="http://${APP_IP}/hello"

            echo ${APP_ENDPOINT} 
            sleep 1m

            if curl ${APP_ENDPOINT} | grep "Hello"
            then
              return 0
            else
              return 1
            fi

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
      - run:
          name: Config kubectl connect to aws
          command: |
            aws eks update-kubeconfig --region us-east-1  --name udacity-devops-project-final
      - run:
          name: Get services in kubectl
          command: |
            kubectl get services | grep publicapp > tmp-services.txt
            sed 's/ .*//' tmp-services.txt > services.txt 
            kubectl delete service $(cat  services.txt| sed 's/publicapp-f0d1e716//g'  | sed -r '/^\s*$/d')

workflows:
  default:
    jobs:
      - check_syntax
      # - build_image:
      #     requires: [check_syntax]
      # - deploy_infrastructure:
      #     requires: [build_image]
      - deploy-app
      - smoke-test:
          requires: [deploy-app]
      - cleanup:
          requires: [smoke-test]

